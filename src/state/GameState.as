package state{		//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------	import flash.display.MovieClip;	import flash.media.Sound;		import math.Collision;	import math.Round;		import music.Sounds;		import object.Car;	import object.Collect;	import object.Goal;		import se.lnu.mediatechnology.stickossdk.application.State;	import se.lnu.mediatechnology.stickossdk.core.Session;	import se.lnu.mediatechnology.stickossdk.input.SuperControls;		import ui.UserInterface;		import utils.CarReplay;	import utils.GameUtils;	import utils.Register;

	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------		/**	 *	 *	DESC..	 * 	 *	@author		XXX XXX	 *	@version 	0.0	 *	 */	public class GameState extends State	{		//private		public var self:* = this;		public 	var collectsX:Array = new Array("0");		private var collectsY:Array = new Array("0");				public var collision:Collision 	= new Collision(self);				public var ground	:mc_background	= new mc_background();		public var goal		:Goal			= new Goal(self);		public var car		:Car			= new Car(self);		public var uibar	:UserInterface 	= new UserInterface(self);		public var round	:Round			= new Round(self);		public var replay	:CarReplay;		public var sounds	:music.Sounds;				public var hitSelf		:Boolean = false;		public var timerStart	:Boolean = false;				//------------------------------------------------------------------------------		//		// Constructor method		//		//------------------------------------------------------------------------------				/**		 * 		 *	The class constructor.		 * 		 *	@return void		 * 		 */		public function GameState():void		{			trace("HELLO FROM GAMESTATE");		}				//------------------------------------------------------------------------------		//		// Override public methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method is executed when the state is ready for use, See it as 		 *	a secondary constructor.		 * 		 *	@return void		 * 		 */		public override function init():void		{			super.init();			initWorld();			initGoal();			initPlayer();			initReplay();			initRound();			newRound();			initUI();		}						/**		 * 		 *	This method runs automatically for each frame, use it to 		 *	update game objects.		 * 		 *	@return void		 * 		 */		public override function update():void {			super.update();			carCollision();			if (hitSelf) follow();		}				/**		 * 		 *	Use this method to clean up the class before it is removed. If 		 * 	you use your own event listeners, remove them here.		 * 		 *	@return void		 * 		 */		public override function dealloc():void {			super.dealloc();			trace("dealloc GameState");			sounds.stop();			sounds = null;			removeChild(collision);			removeChild(ground);			removeChild(goal);			removeChild(car);			removeChild(round);			removeChild(uibar);			removeChild(replay);						self 	= null;			collectsX = null;			collectsY = null;			collision = null;			ground	= null;			goal	= null;			car		= null;			round	= null;			uibar	= null;		}				//------------------------------------------------------------------------------		//		// Public methods		//		//------------------------------------------------------------------------------		/**		 * Ends the game and changes state 		 * when all rounds has been cleared.		 * 		 * @return void		 * 		 */		public function finishGame():void		{			Register.time 	= round.TIME;		//Total time played.			state 			= new WinState();	//WinState for sending highscores.		}				/**		 * Calling this function changes the active round		 * new Collects are added to the stage.		 * 		 * @return void		 * 		 */		public function newRound(round:uint = 1):void		{			collectsX.splice(0);	//Resets the collect arrays (just in case)			collectsY.splice(0);						if (round == 1) {				collectsX.push(670,	660, 660, 440, 225, 115, 225, 270, 210, 255, 350, 516);				collectsY.push(320,	215, 50	, 65 , 80 , 125, 234, 345, 436, 500, 513, 495);			}						if (round == 2) {				sounds.play("goal");				replay.alpha = 0.3;				collectsX.push(687, 665, 590, 455, 340, 240, 138, 59,  140, 73,  155, 263, 355, 495, 648);				collectsY.push(275, 162, 85,  133, 250, 133, 70,  150, 251, 344, 461, 355, 440, 492, 466);			}						if (round == 3) {				sounds.play("goal");				collectsX.push(670, 585, 465, 363, 318, 325, 410, 513, 605, 680, 210, 115, 55,  129, 140);				collectsY.push(273, 162, 133, 202, 289, 395, 498, 438, 512, 440, 153, 70,  172, 163, 250);			}						if (round > 3) {				sounds.play("goal");				removeChild(replay);				return;	//Escapes from doing the addCollects()-method;			}			collision.initValue();			addCollects();		}				/**		 * Activates when the player hits its clone. 		 * Makes the player follow the clone for a set of time.		 * 		 * @return void		 * 		 */		public function follow():void {			car.car.gotoAndStop(2);			car.x = replay.x;			car.y = replay.y;						if (!timerStart) {				timerStart = true;				Session.application.state.setPause(4, endFollow);			}		}				//------------------------------------------------------------------------------		//		// Private methods		//		//------------------------------------------------------------------------------		/**		 * Places all the Collects for the active round to the stage.		 * 		 * Round.legitLap is required to be set to false, 		 * for preventing unlegit passage of the finishline.		 * 		 * @return void		 * 		 */		private function addCollects():void {			round.legitLap = false;						for (var i:int = 0; i < collectsX.length; i++) {				 var _x:uint = collectsX[i];				 var _y:uint = collectsY[i];				 var collect:Collect = new Collect(_x, _y);				addChild(collect);								worldObjectify(collect);			}			}				/**		 * Ends the forced following to the clone.		 * 		 * @return void		 * 		 */		public function endFollow():void {			car.car.gotoAndStop(1);			hitSelf 	= false;			timerStart 	= false;			Session.setPause(2, reactivateReplay);		}				/**		 * Places the clone back to the worldObjects after a set of time,		 * after a successful follow has occured.		 * 		 * @return void		 * 		 */		private function reactivateReplay():void
		{
			worldObjectify(replay);
		}				/**		 * Pushes the 		 * 		 * @param object	The MovieClip to be pushed in to the Collsion.worldObjects Vector.		 * @return void		 * 		 */		private function worldObjectify(object:MovieClip):void {			collision.worldObjects.push(object);		}				/**		 *		 *	Passes the players hitbox each fram for collision detection.		 * 		 *	@return void		 * 		 */		private function carCollision():void {			collision.checkCollision(car.hitBox);		}					/**		 * Initializes and places all required DisplayObjects on the stage.		 * 		 * @return void		 * 		 */		private function initWorld():void {			sounds = new music.Sounds("game");			addChild(ground);		}				private function initPlayer():void {			addChild(car);			GameUtils.positionObject(car, goal.x + 45, goal.y);		}				private function initGoal():void {			addChild(goal);			GameUtils.positionObject(goal, 620, 400);			worldObjectify(goal);		}				private function initReplay():void		{			replay = new CarReplay(goal.x, goal.y);			addChild(replay);			worldObjectify(replay);		}				private function initUI():void {			addChild(uibar);			GameUtils.positionObject(uibar, 0, 530);		}						private function initRound():void {			addChild(round);			GameUtils.positionObject(round);		}	}}