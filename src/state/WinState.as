package state{		//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------		import math.Round;		import se.lnu.mediatechnology.stickossdk.application.State;	import se.lnu.mediatechnology.stickossdk.core.Session;		import state.HighScoreState;		import utils.Register;
	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------		/**	 *	 *	DESC..	 * 	 *	@author		XXX XXX	 *	@version 	0.0	 *	 */	public class WinState extends State	{		private var background:mc_background = new mc_background();				//------------------------------------------------------------------------------		//		// Constructor method		//		//------------------------------------------------------------------------------				/**		 * 		 *	The class constructor.		 * 		 *	@return void		 * 		 */		public function WinState():void	{		}				//------------------------------------------------------------------------------		//		// Override public methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method is executed when the state is ready for use, See it as 		 *	a secondary constructor.		 * 		 *	@return void		 * 		 */		public override function init():void		{			trace("HELLO FROM WINSTATE");			trace(Register.time);			initBackground();			initInsertion();		}				/**		 * 		 *	This method runs automatically for each frame, use it to 		 *	update game objects.		 * 		 *	@return void		 * 		 */		public override function update():void {		}				/**		 * 		 *	Use this method to clean up the class before it is removed. If 		 * 	you use your own event listeners, remove them here.		 * 		 *	@return void		 * 		 */		public override function dealloc():void	{		}				//------------------------------------------------------------------------------		//		// Private methods		//		//------------------------------------------------------------------------------				private function initBackground():void {
			trace("bg")			addChild(background);		}				private function initInsertion():void {			trace("insert")
			Session.highscore.smartSend(Register.gameID, 0, 1000 - Register.time, 10, endGame);
		}			   /**		* 		*	Ends the game and sends the highscores off to the database.		* 	Because the rounds are over the game register is also reset.  		* 			* 	@param xml:XML the required received paramater from the databse request. Default is null.		* 		*	@return void		* 		*/		private function endGame(xml:XML = null):void		{			Register.time 	= 0;			state = new HighScoreState();		}	}}