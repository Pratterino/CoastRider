package state{		//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------		import control.ArduinoAcc;		import music.Sounds;		import se.lnu.mediatechnology.stickossdk.application.State;	import se.lnu.mediatechnology.stickossdk.input.Controls;	import se.lnu.mediatechnology.stickossdk.input.Keyboard;	import se.lnu.mediatechnology.stickossdk.input.SuperControls;
	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------		/**	 *	 *	DESC..	 * 	 *	@author		XXX XXX	 *	@version 	0.0	 *	 */	public class MenuState extends State	{						private var  controls	:SuperControls 	= new SuperControls();		private var _menuState	:mc_state 		= new mc_state();		private var _chosenState:uint 			= 1;				private var sounds		:music.Sounds		//------------------------------------------------------------------------------		//		// Constructor method		//		//------------------------------------------------------------------------------				/**		 * 		 *	The class constructor.		 * 		 *	@return void		 * 		 */		public function MenuState():void		{			trace("HELLO FROM MENUSTATE");		}				//------------------------------------------------------------------------------		//		// Override public methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method is executed when the state is ready for use		 * 		 *	@return void		 * 		 */		public override function init():void		{			addChild					(_menuState);			_menuState.gotoAndStop		("menuState");			_menuState.menu.gotoAndStop	("playNow");			sounds = new music.Sounds	("menu");		}				/**		 * 		 *	This method runs automatically for each frame, use it to 		 *	update game objects.		 * 		 *	@return void		 * 		 */		public override function update():void		{			updateControls();		}				/**		 * 		 *	Use this method to clean up the class before it is removed. If 		 * 	you use your own event listeners, remove them here.		 * 		 *	@return void		 * 		 */		public override function dealloc():void	{			sounds.stop();		}				//------------------------------------------------------------------------------		//		// Private methods		//		//------------------------------------------------------------------------------				/**		 * 		 *	This method handles the keyboard commands for this state.		 * 		 *	@return void		 * 		 */		private function updateControls():void		{			if (keyboard.pressedOnce(controls.PLAYER_LEFT)) {				_menuState.menu.gotoAndStop	("playNow");				sounds.play();				_chosenState = 1;			}						else if (keyboard.pressedOnce(controls.PLAYER_RIGHT)) {				_menuState.menu.gotoAndStop	("highscore");				sounds.play();				_chosenState = 2;			}						if (keyboard.pressedOnce(Controls.UNIVERSAL_START_1 || Controls.UNIVERSAL_START_2)) {				goState();			}		}				/**		 * 		 *	This method switchboards the different states depending		 * 	on the users input.  		 * 		 *	@return void		 * 		 */		private function goState():void		{			sounds.play();						switch(_chosenState){				case 1:					state = new GameState();					break;				case 2:					state = new HighScoreState();					break;			}		}	}}