////////////////////////////////////////////////////////////////////////////////////  LINNAEUS UNIVERSITY//  Copyright 2012 Linnaeus university, Media Technology, sweden.//  Some Rights Reserved.////  NOTICE: LNU Media Technology permits you to use and modify this file//  in accordance with the terms of the license agreement accompanying it.//////////////////////////////////////////////////////////////////////////////////package se.lnu.mediatechnology.stickossdk.display{	//------------------------------------------------------------------------------	//	// Import	//	//------------------------------------------------------------------------------		// IMPORT FROM FLASH IDE		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;		// IMPORT FROM STICKOS SDK		import se.lnu.mediatechnology.stickossdk.core.Session;	//------------------------------------------------------------------------------	//	// Public class	//	//------------------------------------------------------------------------------		/**	 *	 *	This class is used to create bitmap-based sprites.	 * 	 *	@author	Henrik Andersen	 *	@version 1.0	 *	 */	public class BitmapSprite extends Bitmap implements IStickOsDisplayObject	{		//--------------------------------------------------------------------------		//		// Protected properties		//		//--------------------------------------------------------------------------				protected var animations:Array;		protected var currentAnimation:BitmapSpriteAnimation;		protected var spriteSheet:BitmapData;				//--------------------------------------------------------------------------		//		// Private properties		//		//--------------------------------------------------------------------------				private var currentAnimationFrameDelay:Number;		private var currentAnimationFrameIndex:int;				//--------------------------------------------------------------------------		//		// Constructor method		//		//--------------------------------------------------------------------------				/**		 *		 *	The class constructor.		 * 		 *	@param	Width			The width of the sprite, not the whole image.		 *	@param	Height			The height of the sprite, not the whole image.		 *	@param	SpriteSheet		The image to be used as the SpriteSheet.		 *		 */		public function BitmapSprite(Width:Number, Height:Number, SpriteSheet:BitmapData) 		{			animations					= new Array();			currentAnimationFrameIndex	= 0;			currentAnimationFrameDelay	= 0;			spriteSheet					= SpriteSheet;						var tmpFrame:BitmapData = new BitmapData(Width, Height);				tmpFrame.copyPixels(SpriteSheet, new Rectangle(0,0,Width,Height), new Point(x,y));						super(tmpFrame);		}				//--------------------------------------------------------------------------		//		// Public methods		//		//--------------------------------------------------------------------------				/**		 *		 * DESC..		 *		 */		public function init():void 		{			// OVERRIDE THIS METHOD FROM SUPER CLASS.		}				/**		 *		 * DESC..		 *		 */		public function update():void 		{			calcCurrentAnimation();			renderCurrentFrame();		}				/**		 *		 *	DESC..		 * 		 */		public function dealloc():void		{					}				/**		 * Adds a new animation to the sprite.		 * 		 * @param	Name		What this animation should be called (e.g. "run").		 * @param	Frames		An array of numbers indicating what frames to play in what order (e.g. 1, 2, 3).		 * @param	FrameRate	The speed in frames per second that the animation should play at (e.g. 40 fps).		 * @param	Looped		Whether or not the animation is looped or just plays once.		 */		public function addAnimation(Name:String, Frames:Array, FrameRate:Number=0, Looped:Boolean=true, Callback:Function=null):void		{			animations.push(new BitmapSpriteAnimation(Name,Frames,FrameRate,Looped,Callback));		}				/**		 * 		 * DESC..		 * 		 * @param	Name	The name of the animation to play.		 */		public function playAnimation(Name:String):void		{			for(var i:int = 0; i < animations.length; i++){				if(animations[i].name.toLowerCase() == Name.toLowerCase()){					currentAnimation = animations[i];					return;				}			}		}				//--------------------------------------------------------------------------		//		// Private methods		//		//--------------------------------------------------------------------------				/**		 * 		 * DESC..		 * 		 * TODO: SNYGGA TILL DENNA..		 * 		 */		private function calcCurrentAnimation():void		{			if(!currentAnimation){				return;			}						currentAnimationFrameDelay += Session.application.timeElapsedBetweenFrames;						if(currentAnimation)			{				while(currentAnimationFrameDelay > currentAnimation.delay)				{					currentAnimationFrameDelay -= this.currentAnimation.delay;										if(currentAnimationFrameIndex == (currentAnimation.frames.length - 1))					{						if(currentAnimation.looped){							currentAnimationFrameIndex = 0;						}						else						{							if(currentAnimation.callback != null){								currentAnimation.callback();							}						}					}					else					{						currentAnimationFrameIndex++;					}				}			}		}				/**		 * 		 * DESC..		 * 		 * TODO: SNYGGA TILL DENNA..		 * 		 */		private function renderCurrentFrame():void		{			if(animations.length <= 0 || !currentAnimation){				return;			}						var tmpRectangle:Rectangle	= new Rectangle();				tmpRectangle.width		= width;				tmpRectangle.height		= height;				tmpRectangle.x			= currentAnimation.frames[currentAnimationFrameIndex] * width / scaleX;						this.bitmapData.copyPixels(spriteSheet, tmpRectangle, new Point(0,0));		}	}}