////////////////////////////////////////////////////////////////////////////////////  LINNAEUS UNIVERSITY//  Copyright 2012 Linnaeus university, Media Technology, sweden.//  Some Rights Reserved.////  NOTICE: LNU Media Technology permits you to use and modify this file//  in accordance with the terms of the license agreement accompanying it.//////////////////////////////////////////////////////////////////////////////////package se.lnu.mediatechnology.stickossdk.input{	//------------------------------------------------------------------------------	//	// Imports	//	//------------------------------------------------------------------------------		import flash.events.KeyboardEvent;		//------------------------------------------------------------------------------	//	// Public Class	//	//------------------------------------------------------------------------------		/**	 *	 *	This is an unnecessarily complicated class to handle keyboard keys. The 	 *	class follows the traditional norm so hopefully it will work fine on all 	 *	systems (windows, mac & linux). For handling of keyboard keys, please use 	 *	<code>Controls</code> or <code>SuperControls</code>.	 * 	 *	@author		Henrik Andersen	 *	@version	1.0	 *	 */	public class Keyboard	{		//--------------------------------------------------------------------------		//		// Public properties		//		//--------------------------------------------------------------------------				public var ESCAPE:Boolean;		public var F1:Boolean;		public var F2:Boolean;		public var F3:Boolean;		public var F4:Boolean;		public var F5:Boolean;		public var F6:Boolean;		public var F7:Boolean;		public var F8:Boolean;		public var F9:Boolean;		public var F10:Boolean;		public var F11:Boolean;		public var F12:Boolean;		public var ONE:Boolean;		public var TWO:Boolean;		public var THREE:Boolean;		public var FOUR:Boolean;		public var FIVE:Boolean;		public var SIX:Boolean;		public var SEVEN:Boolean;		public var EIGHT:Boolean;		public var NINE:Boolean;		public var ZERO:Boolean;		public var NUMPADONE:Boolean;		public var NUMPADTWO:Boolean;		public var NUMPADTHREE:Boolean;		public var NUMPADFOUR:Boolean;		public var NUMPADFIVE:Boolean;		public var NUMPADSIX:Boolean;		public var NUMPADSEVEN:Boolean;		public var NUMPADEIGHT:Boolean;		public var NUMPADNINE:Boolean;		public var NUMPADZERO:Boolean;		public var PAGEUP:Boolean;		public var PAGEDOWN:Boolean;		public var HOME:Boolean;		public var END:Boolean;		public var INSERT:Boolean;		public var MINUS:Boolean;		public var NUMPADMINUS:Boolean;		public var PLUS:Boolean;		public var NUMPADPLUS:Boolean;		public var DELETE:Boolean;		public var BACKSPACE:Boolean;		public var TAB:Boolean;		public var Q:Boolean;		public var W:Boolean;		public var E:Boolean;		public var R:Boolean;		public var T:Boolean;		public var Y:Boolean;		public var U:Boolean;		public var I:Boolean;		public var O:Boolean;		public var P:Boolean;		public var LBRACKET:Boolean;		public var RBRACKET:Boolean;		public var BACKSLASH:Boolean;		public var CAPSLOCK:Boolean;		public var A:Boolean;		public var S:Boolean;		public var D:Boolean;		public var F:Boolean;		public var G:Boolean;		public var H:Boolean;		public var J:Boolean;		public var K:Boolean;		public var L:Boolean;		public var SEMICOLON:Boolean;		public var QUOTE:Boolean;		public var ENTER:Boolean;		public var SHIFT:Boolean;		public var Z:Boolean;		public var X:Boolean;		public var C:Boolean;		public var V:Boolean;		public var B:Boolean;		public var N:Boolean;		public var M:Boolean;		public var COMMA:Boolean;		public var PERIOD:Boolean;		public var NUMPADPERIOD:Boolean;		public var SLASH:Boolean;		public var NUMPADSLASH:Boolean;		public var CONTROL:Boolean;		public var ALT:Boolean;		public var SPACE:Boolean;		public var UP:Boolean;		public var DOWN:Boolean;		public var LEFT:Boolean;		public var RIGHT:Boolean;				//--------------------------------------------------------------------------		//		// Protected properties		//		//--------------------------------------------------------------------------				protected var lookup:Object;		protected var keys:Array;		protected var aKeyIsDown:Boolean;				//--------------------------------------------------------------------------		//		// Protected constants		//		//--------------------------------------------------------------------------				protected const numOfCharCodes:uint = 256;				//--------------------------------------------------------------------------		//		// Constructor method		//		//--------------------------------------------------------------------------				/**		 *		 *	The class constructor.		 *		 */		public function Keyboard()		{			lookup	= new Object();			keys	= new Array(numOfCharCodes);						initKeys();		}				//--------------------------------------------------------------------------		//		// Public methods		//		//--------------------------------------------------------------------------				/**		 *		 *	Updates the key states.		 *		 */		public function update():void		{			updateKeys();		}				/**		 *		 *	Reset all keyboard data.		 *		 */		public function reset():void		{			resetKeys();		}				/**		 * 		 *	Check to see if a particular key is pressed or not.		 * 		 *	@param		Key		The key constant that we want to check.		 * 	@return				Whether the key is pressed.		 * 		 */		public function pressed(Key:String):Boolean 		{ 			return this[Key]; 		}				/**		 *		 *	Check to see if a key was pressed once.		 * 		 *	@param		Key		The key constant that we want to check.		 *	@return				Whether the key was just pressed.		 *		 */		public function pressedOnce(Key:String):Boolean 		{ 			return keys[lookup[Key]].current == 2; 		}				/**		 *		 *	Check to see if a key was released.		 *		 *	@param		Key		The key constant that we want to check.		 *	@return				Whether the key was just released.		 * 		 */		public function released(Key:String):Boolean 		{ 			return keys[lookup[Key]].current == -1; 		}				/**		 *		 *	Method to handle automatic key-down functionality from 		 *	<code>Engine</code>.		 *		 */		public function handleKeyDown(event:KeyboardEvent):void		{			var keyObject:Object = keys[event.keyCode];						if(keyObject == null){				return;			}						if(keyObject.current > 0)			{				keyObject.current = 1;			}			else 			{				keyObject.current = 2;			}						this[keyObject.name] = true;			aKeyIsDown			 = true;		}				/**		 *		 *	Method to handle automatic key-up functionality from 		 *	<code>Engine</code>.		 *		 */		public function handleKeyUp(event:KeyboardEvent):void		{			var keyObject:Object = keys[event.keyCode];						if(keyObject == null){				return;			}						if(keyObject.current > 0)			{				keyObject.current = -1;			}			else 			{				keyObject.current = 0;			}						this[keyObject.name]	= false;			aKeyIsDown				= false;		}				/**		 *		 * 	Method to check if any key is pressed. The escape key is not included in 		 *	the calculations since it is used to switch between full screen and 		 *	window mode.		 *		 */		public function anyKeyIsPressed():Boolean		{			if(pressed("ESCAPE")) return false;						return aKeyIsDown;		}				//--------------------------------------------------------------------------		//		// Protected methods		//		//--------------------------------------------------------------------------				/**		 * 		 *	An internal helper function used to build the key array.		 * 		 *	TODO:	Skapa en extern klass för KeyObject.		 * 		 *	@param	KeyName		String name of the key.		 *	@param	KeyCode		The numeric Flash code for this key.		 * 		 */		protected function addKey(KeyName:String,KeyCode:uint):void		{			lookup[KeyName]	= KeyCode;			keys[KeyCode]	= { name: KeyName, current: 0, last: 0 };		}				/**		 *		 *	Method for creating the list of keyboard keys.		 *		 */		protected function initKeys():void		{			var i:uint;						i = 65;						while(i <= 90){				addKey(String.fromCharCode(i), i++);			}						i = 48;						addKey("ZERO",			i++);			addKey("ONE",			i++);			addKey("TWO",			i++);			addKey("THREE",			i++);			addKey("FOUR",			i++);			addKey("FIVE",			i++);			addKey("SIX",			i++);			addKey("SEVEN",			i++);			addKey("EIGHT",			i++);			addKey("NINE",			i++);						i = 96;						addKey("NUMPADZERO",	i++);			addKey("NUMPADONE",		i++);			addKey("NUMPADTWO",		i++);			addKey("NUMPADTHREE",	i++);			addKey("NUMPADFOUR",	i++);			addKey("NUMPADFIVE",	i++);			addKey("NUMPADSIX",		i++);			addKey("NUMPADSEVEN",	i++);			addKey("NUMPADEIGHT",	i++);			addKey("NUMPADNINE",	i++);			addKey("PAGEUP", 		33);			addKey("PAGEDOWN", 		34);			addKey("HOME", 			36);			addKey("END", 			35);			addKey("INSERT", 		45);						i = 1;						while(i <= 12){				addKey("F"+i, 111+(i++));			}							addKey("ESCAPE",		27);			addKey("MINUS",			189);			addKey("NUMPADMINUS",	109);			addKey("PLUS",			187);			addKey("NUMPADPLUS",	107);			addKey("DELETE",		46);			addKey("BACKSPACE",		8);			addKey("LBRACKET",		219);			addKey("RBRACKET",		221);			addKey("BACKSLASH",		220);			addKey("CAPSLOCK",		20);			addKey("SEMICOLON",		186);			addKey("QUOTE",			222);			addKey("ENTER",			13);			addKey("SHIFT",			16);			addKey("COMMA",			188);			addKey("PERIOD",		190);			addKey("NUMPADPERIOD",	110);			addKey("SLASH",			191);			addKey("NUMPADSLASH",	191);			addKey("CONTROL",		17);			addKey("ALT",			18);			addKey("SPACE",			32);			addKey("UP",			38);			addKey("DOWN",			40);			addKey("LEFT",			37);			addKey("RIGHT",			39);			addKey("TAB",			9);				}				/**		 *		 *	Method to update all the keys, ie check whether they are used or not.		 *		 */		protected function updateKeys():void		{			for(var i:uint = 0; i < numOfCharCodes; i++)			{				if(keys[i] == null){					continue;				}								var keyObject:Object = keys[i];								if((keyObject.last == -1) && (keyObject.current == -1))				{					keyObject.current = 0;				}					else if((keyObject.last == 2) && (keyObject.current == 2))				{					keyObject.current = 1;				}								keyObject.last = keyObject.current;			}		}				/**		 *		 * Quick way reset all the keys.		 *		 */		protected function resetKeys():void		{			for(var i:uint = 0; i < numOfCharCodes; i++)			{				if(keys[i] == null){					continue;				}								var keyObject:Object	= keys[i];				this[keyObject.name]	= false;				keyObject.current		= 0;				keyObject.last			= 0;			}		}	}}